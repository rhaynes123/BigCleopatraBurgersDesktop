@page "/details/{Number:guid}"
@using System;
@using BigCleopatraBurgers.Services;
@using BigCleopatraBurgers.Models;
@using BigCleopatraBurgers.Models.Enums;
@inject ProductOrderService ProductorderService
@inject NavigationManager NavManager
@attribute [Authorize]
<h3>Order Details</h3>
<p>Order Number: @Order.OrderNumber</p>
<p>Order Date: @Order.OrderDateTime</p>
<p>Order Status: <strong>@Order.Status</strong></p>
<p>Calculated Total: @Order.CalculateTotal()</p>
<p>Final Total: @Order.Total</p>
<div>
    @if (Order.Status.Equals(Status.Pending))
    {
        <button class="btn btn-success" @onclick="@( ()=> ChangeOrderStatus(Status.Complete) )">Complete Order</button>
        <button class="btn btn-danger" @onclick="@( ()=> ChangeOrderStatus(Status.Cancelled) )">Cancel Order</button>
    }
    else
    {
        <button class="btn btn-secondary">Complete Order</button>
    }

</div>
@if (Order is null || !Order.OrderedProducts.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <table id="tblOrderedProducts" class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Order Number</th>
                <th>Product Price</th>
                <th>Product Name</th>
                <th>Order Date</th>
                <th>Product Status</th>
                <th>Complete/ Cancel</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Order.OrderedProducts)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.OrderNumber</td>
                    <td>$@item.Price</td>
                    <td>@item.Name</td>
                    <td>@item.OrderDateTime</td>
                    <td>@item.Status</td>
                    <td>
                        <button class="btn btn-success" @onclick="@( () => ChangeProductStatus(item, Status.Complete))"><i class="bi bi-check-circle"></i>Complete</button>
                        <button class="btn btn-warning" @onclick="@( () => ChangeProductStatus(item, Status.Cancelled))"><i class="bi bi-x-lg"></i>Cancel</button>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    private Order Order = new();
    [Parameter]
    public Guid Number { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Order = await ProductorderService.GetOrderByNumberAsync(Number);
    }

    private async Task ChangeProductStatus(OrderedProduct product, Status status)
    {
        product.SetStatus(status);
        bool result = await ProductorderService.UpdateOrderedProductAsync(product);
        if (result)
        {
            StateHasChanged();
        }

    }
    private async Task ChangeOrderStatus(Status status)
    {
        if (Order.OrderedProducts.Any(p => p.Status.Equals(Status.Pending)))
        {
            return;
        }
        Order.SetTotal();
        Order.SetStatus(status);
        bool result = await ProductorderService.UpdateOrderAsync(Order);
        if (result)
        {
            NavManager.NavigateTo("/queue");
        }
    }


}

